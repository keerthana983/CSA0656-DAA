#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

// Function to generate all prime numbers up to n using Sieve of Eratosthenes
void sieveOfEratosthenes(int n) {
    // Create a boolean array "prime[0..n]" and initialize all entries as true
    // A value in prime[i] will be false if i is Not a prime
    bool *prime = (bool *)malloc((n + 1) * sizeof(bool));
    for (int i = 0; i <= n; i++) {
        prime[i] = true;
    }

    for (int p = 2; p * p <= n; p++) {
        // If prime[p] is not changed, then it is a prime
        if (prime[p] == true) {
            // Update all multiples of p to not prime
            for (int i = p * p; i <= n; i += p) {
                prime[i] = false;
            }
        }
    }

    // Print all prime numbers
    printf("Prime numbers up to %d are: ", n);
    for (int p = 2; p <= n; p++) {
        if (prime[p] == true) {
            printf("%d ", p);
        }
    }
    printf("\n");

    // Free allocated memory
    free(prime);
}

int main() {
    int n;
    printf("P.KEERTHANA-192211638\n");
    printf("Enter a number: ");
    scanf("%d", &n);

    sieveOfEratosthenes(n);

    return 0;
}
